In Go, all files have to be associated with a package. For now just understand that there should be a package statement at the top of every .go file and it should be followed by a name of your choice. A package is a good way to logically group various functionality in larger programs. For example, if you were writing a program to build virtual models of vehicles, you could probably put all your car models in a package called cars and all your bus models in a package called buses. Helping to to group related functionality is one of its uses. More on packages later. 

Println is a function that I know prints a string onto the screen. I attempted it, but the compiler says it is undefined. Why so? Remember the packages I mentioned earlier, here is where they start to become useful for us. Functions like Println are present in certain packages. These packages however are not automatically available for our programs though. If we need to reach into the packages to use a certain functionality, we need to import it. Well yes, kind of like we import those foreign cars. You want to use one, well import it first. 


---


In English, if we wanted to refer to a keyboard that is part of a computer, we would say: computer’s keyboard
In French it would be: clavier de l'ordinateur
In Tamil: computeroode keyboard
In Hindi: computer ka keyboard
In Malayalm: computerinde keyboard
In Go: computer.keyboard

Did you notice that last line? In Go, we use a dot notation with the composing element on the left and the composed element on the right. So more hypothetical examples: Car.Wheel, Mary.Hand, Computer.Screen, Computer.Keyboard.AKey, Computer.Keyboard.AKey.RowNumber. As you can see, the composition can be nested to multiple levels. 

---

Here Go automatically allocates some memory for the variable i - the size of the memory allocated here is that required by a single integer. Since we have also said i := 5, the integer value 5 is assigned to that memory space after the space is allocated. For variable j, no assignment has been stated. However, Go assigns a "zero-value" by default to most data types. For numeric fields, this is the value 0. 

---

When there is a value stored in memory, it is stored in a physical location. This location is called its address. Many programming languages, including Go, allows you to access the data in a location by specifying its location in memory. 

ie:

func main() {
    i := 5
    fmt.Println("i is: ", i)
    fmt.Println("address of i is: ", &i)
}

i is: 5
address of i is: 0xf840000040

---

The need for addresses/pointers/references
Why do we need the complexity of addresses, pointers and references? Why can we not just use the actual value? 

One of the reasons for working with addresses is a matter of efficiency; we shall see more when we discuss pass-by-reference and pass-by-value. As a metaphor, imagine a page on Wikipedia, let’s say one about Paris: http://en.wikipedia.org/wiki/Paris. If you wanted to send that entire information to somebody, one way would be to copy the entire page into a document and send it to him, say via email or as a print out. An easier and much faster alternative would be to just send the link to the page, which is a unique url/reference to it. In this case, there are no redundant copies and both of you can read the latest page about Paris. If you sent the entire page, the former method, then it is similar to ‘pass-by-value’ - the entire value is being passed. If you sent only the link, the latter method, then it is similar to ‘pass-by-reference’ which is passing the address. 

Both are useful depending on what is required in a situation. When you pass by reference, there is only a single copy of the target, and therefore any changes made by one person can be seen by all. When you pass by value, there are separate copies and what is changed by one person does not affect the original.

---

Within the Go for loop you can use the multiple assignment to initialize many variables. Similarly to increment or update multiple variables, you will have to use the multiple assignment paradigm (i, j = i+2, j+2). For those used to certain other languages where you can separate statements within the for with commas, please note that this does not exist in Go.


    for i, j, s := 0, 5, "a"; i < 3 && j < 100 && s != "aaaaa"; i, j, s = 	i+1, j+1, s + "a"  {
        fmt.Println("Value of i, j, s:", i, j, s)
    }


---

    for { //since there are no checks, this is an infinite loop
        if i >= 3 { break } //break out of this for loop when this condition is met
        fmt.Println("Value of i is:", i)
        i++;
    }

    for i := 0; i<7 ; i++ { //control comes back here when there is a ‘continue’ within this for block
        if i%2 == 0 { 
            continue //if it is an even number, go back to beginning of for loop
        }
        fmt.Println("Odd:", i)  //execution will reach here only when i%2 is not 0, and therefore it is odd
    }

---

The range keyword allows you to iterate over items of a list like an array or a map. For understanding it, you could translate the range keyword to for each index of. When used with arrays and slices, it returns the integer index of the item. When used with maps, it returns the key of the next key-value pair. It works with returning either one value or two. If only one, it is the index of the item, and if it is two then it is the index and the corresponding value.

func main() {
    //on an array, range returns the index
    a := [...]string{"a", "b", "c", "d"}
    for i := range a {
        fmt.Println("Array item", i, "is", a[i])
    }

    //on a map, range returns the key 
    capitals := map[string] string {"France":"Paris", "Italy":"Rome", "Japan":"Tokyo" }
    for key := range capitals {
        fmt.Println("Map item: Capital of", key, "is", capitals[key])
    }

    //range can also return two items, the index/key and the corresponding value 
    for key2, val := range capitals {
        fmt.Println("Map item: Capital of", key2, "is", val)
    }
}

---

Other programming languages use a few keywords like public, private, package, protected, etc. to allow the developer to define the visibility and accessibility of variables within different contexts. I thought all of that was absolutely necessary until I saw Go’s approach to it. Go’s approach to variable visibility and accessibility is so simple that you’ll think it is pretty silly. So, without further ado, here it is: if the first letter is capital, it is visible outside the package. That’s it. 
---

Inheritance is the ability for a type to automatically obtain the behaviors of a parent class. Multiple inheritance is the ability for a type to obtain the behaviors of more than one parent class. As a real world example, if Phone was a type, then MobilePhone could be a type that inherits the behavior of the Phone type. This works in many cases, but not in all. What would happen to say a type, CameraPhone that has to have the behaviors of both a Camera and a Phone? One straightforward way to solve this would be to be able to inherit from both. (Note that in this simple example, it is possible to put a camera in a phone or a phone in a camera, but it is not always the case - say a child who inherits the behaviors or features of each of his parents.)

Some object oriented languages used to solve this by denying that multiple inheritance is ever necessary. Others work around the difficulties by providing what is called an interface and the ability for a sub type to subclass one type, but implement many interfaces. Go on the other hand has multiple inheritance. The way to get it is exactly the same way as we did for single inheritance that we already looked at, using anonymous fields. Let’s implement our Camera+Phone=CameraPhone example. 

---

